require([
	'../../src/aloha',
	'../../src/dom',
	'../../src/arrays',
	'../../src/ranges',
	'../../src/boromir',
	'../../src/boundaries',
	'../../src/formatting',
	'../../src/blocks',
	'../../src/dragdrop',
	'../../src/editables',
	'../../src/keys',
	'../../src/mouse',
	'../../src/paste',
	'../../src/selections',
	'../../src/typing'
], function (
	aloha,
	Dom,
	Arrays,
	Ranges,
	Boromir,
	Boundaries,
	Formatting,
	Blocks,
	DragDrop,
	Editables,
	Keys,
	Mouse,
	Paste,
	Selections,
	Typing
) {
	'use strict';

  	[].forEach.call(document.querySelectorAll('.aloha-editable'), aloha);

	var CLASS_PREFIX = 'aloha-action-';

	/**
	 * Executes an action object as generated by parseAction() which looks like
	 * one of the following:
	 *
	 * {
	 *    format : true, // it's an action to format something
	 *    node   : 'b'   // as <b>
	 * }
	 *
	 * or even a compound of operations ...
	 *
	 * {
	 *    format     : true,
	 *    node       : 'b',
	 *    style      : true,
	 *    styleName  : 'background',
	 *    styleValue : 'red'
	 * }
	 *
	 * @param  {Object.<string,?>} action
	 * @param  {Array.<Boundary>}  boundaries
	 * @param  {Editor}            editor
	 * @return {Array.<Boundaries>}
	 */
	function execute(action, boundaries, editor) {
		if (action.format) {
			boundaries = Formatting.format(
				action.node,
				boundaries[0],
				boundaries[1]
			);
		}
		if (action.style) {
			boundaries = Formatting.style(
				action.styleName,
				action.styleValue,
				boundaries[0],
				boundaries[1]
			);
		}
		if (action.classes) {
			boundaries = Formatting.classes(
				action.classNames,
				boundaries[0],
				boundaries[1]
			);
		}
		Boundaries.select(boundaries[0], boundaries[1]);
		aloha.selections.show(editor.selectionContext.caret, boundaries[1]);
		return boundaries;
	}

	/**
	 * Extracts the intended aloha action from a dom element.
	 * Will look through the classes to find an aloha-action-* class, which is
	 * then transformed into an action object that looks like the following:
	 * { format: true, node: 'b' }
	 *
	 * @param  {Element} element
	 * @return {?Object}
	 */
	function parseAction(element) {
		var action = {},
		    actionArr,
		    className,
		    classes = Arrays.coerce(element.classList).concat(Arrays.coerce(element.parentNode.classList));

		for (var i = 0; i < classes.length; i++) {
			className = classes[i];
			if (className.indexOf(CLASS_PREFIX) === 0) {
				actionArr = className.substr(CLASS_PREFIX.length).split('-');
				action[actionArr[0]] = true;
				action.node = actionArr[1].toUpperCase();
				return action;
			}
		}

		return null;
	}

	/**
	 * Updates the ui according to current state overrides.
	 *
	 * Sets to active all ui toolbar elements that match the current overrides.
	 *
	 * @param {Array.<Boundary>} boundries
	 */
	function updateUi(boundaries) {
		var overrides = aloha.overrides.harvest(Boundaries.container(boundaries[0]));
		var node = Boromir(document.querySelector('.aloha-ui-toolbar'));
		var walk = function (node) {
			if (node.type() === Boromir.ELEMENT) {
				node = node.removeClass('active');
				overrides.forEach(function (override) {
					if (node.hasClass(CLASS_PREFIX + override[0])) {
						node = node.addClass('active');
					}
				});
			}
			return node.children(node.children().map(walk));
		};
		walk(node).updateDom();
	}

	function handle(event) {
		if (!event.range || (event.type !== 'keyup' && event.type !== 'click')) {
			return event;
		}
		var target = event.nativeEvent.target || event.nativeEvent.srcElement;
		if (target === event.editor.selectionContext.caret) {
			return event;
		}
		var boundaries = Boundaries.fromRange(event.range);
		var action = parseAction(target);
		if (action) {
			boundaries = execute(action, boundaries, event.editor);
		}
		updateUi(boundaries);
		event.range = Ranges.fromBoundaries(boundaries[0], boundaries[1]);
		return event;
	}

	aloha.editor.stack = [
		handle,
		Selections.handle,
		Typing.handle,
		Blocks.handle,
		DragDrop.handle,
		Paste.handle,
		Editables.handle,
		Mouse.handle,
		Keys.handle
	];
});
