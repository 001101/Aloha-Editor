h2. Writing Plugins

After reading this guide, you will be able to:

* Create plugins to adjust Aloha to your needs.
* Load and define dependencies with RequireJS.
* Include other resources from your plugins

endprologue.

h3. What's a plugin?

A plugin extends Aloha with new behavior and can be loaded by the user. It should be self-contained, so that it can be used for other Aloha installations.

A full-blown plugin has the following file structure:

* @pluginname@
** @css@ - Stylesheets
** @doc@ - Documentation, if exists
** @img@ - Image assets
** @lib@ - RequireJS modules
** @nls@ - Localization files, see "Localization and I18N":#localization
** @res@ - other resources which do not fit into other directories, like JavaScript templates
** @test@ - Unit tests
** @vendor@ - Legacy JavaScript dependencies, not managed by RequireJS
** @package.json@ - Metadata about your package, in CommonJS format

All file names are, by convention, lowercase.

h3. A basic Aloha plugin

For a very basic plugin, nothing else than a plugin module in @lib/@ has to be
created. The module is named as +pluginname-plugin.js+.

<javascript filename="aloha/plugins/custom/helloworld/lib/helloworld-plugin.js">
define(
['core/plugin'],
function(Plugin) {
    "use strict";

    return Plugin.create('helloworld', {
        init: function() {
            // Executed on plugin initialization
        },
        destroy: function() {
            // Executed when this plugin is unloaded
        }
    });
});
</javascript>

This code requires the core plugin module (which defines the @Plugin@ class) and creates a plugin with the name @myplugin@.

Loading the new plugin is easy, just add it to the list of plugins in the main
script tag loading Aloha:

<html>
<head>
	<script src="javascripts/aloha/require.js"
			data-main="javascripts/aloha/aloha.js"
			id="aloha-script-include"
			data-plugins="common/format,custom/helloworld">
	</script>
	<link rel="stylesheet" href="javascripts/aloha/aloha.css" type="text/css">
</head>
</html>

NOTE: If your plugin should be published to the public you should consider writing a @package.json@ file with metadata about the plugin. Furthermore, the name of your plugin shoulf be globally unique.

h3. Plugin bundles

WARNING: not yet done.

TODO
* Preexisting bundles
* Naming implications

h3. RequireJS modules explained

We use "RequireJS":http://requirejs.org to manage JavaScript dependencies, that's why some
basic understanding is very helpful. By using RequireJS, we gain some nice benefits: First, we the dependency management between JavaScript files is done for us, meaning they are included in the correct order. Second, we do not pollute the global namespace, allowing tricks like "loading two different versions":http://requirejs.org/docs/requirements.html#8 of Aloha on a single page.

The basic element of RequireJS is a so called +module+ which is one file that defines and exports a class or other JavaScript value. This reference can be used in other modules by *requiring* that module.

INFO: Roughly, a RequireJS module is the same as a JavaScript @Class@, but without a global variable.

In the following example, we define two modules. The first module @foo@ defines a class with a method @doSomething()@. The second module @bar@ has a dependency to @foo@, and RequireJS injects what has been returned by @foo@.

<javascript filename="myplugin/lib/foo.js">
define(
[],
function() {
    "use strict";
    return Class.extend({
        doSomething: function() {
        }
    });
});
</javascript>

<javascript filename="myplugin/lib/bar.js">
define(
['myplugin/foo'],
function(Foo) {
    "use strict";
    var fooInstance = new Foo();
    fooInstance.doSomething();
});
</javascript>

Note that a module does not need to define its own name, it is simply named by its location on the file system.

Modules are created using +define(dependencies, callback)+, where the first parameter @dependencies@ is a list of other RequireJS modules this plugin needs in order to function properly. The second parameter is @callback@ is a function which is executed *as soon as all dependencies are loaded*. The first dependency is passed to the @callback@ as first parameter, the second dependency as the second, and so on.

NOTE: Circular dependencies need some special treatment. It is most often a sign of bad code, but if you need to do this, follow the "guide at the RequireJS website":http://requirejs.org/docs/api.html#circular.

So, at which place does Aloha look up modules? We'll explain this with a few examples:

|_. Definition in RequireJS |_. File Name |
| @myplugin/foo@ | @path_to_bundle/myplugin/lib/foo.js@ <br /> Including other RequireJS modules is the most common case |
| @myplugin/vendor/legacy_lib@ | @path_to_bundle/myplugin/vendor/legacy_lib.js@ <br /> Include a legacy library |
| @css!myplugin/css/cssfile.css@ | @path_to_bundle/myplugin/css/cssfile.css@ <br /> Includes the CSS file in the document @<head>@. Explained "here":#including-css-files |
| @i18n!myplugin/nls/i18n.js@ | depends on current language, see "Localization":#localization for details. |
| @text!myplugin/res/template.html@ | Load a text file (e.g. templates). See "Text file loading":#text-files for details. |

The bundle name is not part of the RequireJS definition, as this is installation-specific. You as plugin developer should not care about where other plugins are located on disk.

h3. Classes and Extension Mechanisms

We use the class definition syntax of "John Resig":http://ejohn.org - slightly adjusted. This means you can create a new class with +Class.extend({ ....})+.

The following example shows how to create and instanciate a class, and how the constructor (which must be named +_construct()+) is called.

<javascript>
var Greeter = Class.extend({
    name: null,

    _constructor: function(name) {
        this.name = name;
    },

    greet: function() {
        alert('Good Morning ' + this.name);
    }
});
var greeterInstance = new Greeter('Christopher');
greeterInstance.greet(); // alerts "Good Morning Chistopher"
</javascript>

Now, if we want to subclass @Greeter@, this is very easy: Just use @Greeter.extend@ for that:

<javascript>
var GreeterForMen = Greeter.extend({
	_constructor: function(name) {
		this._super('Mr. ' + name);
	}
});
var greeterInstance = new GreeterForMen('Christopher');
greeterInstance.greet(); // alerts "Good Morning Mr. Chistopher"
</javascript>

You can use +this._super()+ to call the superclass constructor.

h3. Mixin Support

Our class definition also supports mixins, so you can specify multiple arguments to @Class.extend@. For example, in order to make your class observable, you can mix in @core/observable@:

<javascript>
define(
['core/observable'],
function(Observable) {
    "use strict";

    return Class.extend(Observable, {
    	// your methods here
    });
});
</javascript>

A mixin itself should not use Class.extend, but instead just return a simple object. You see this in the following example:

<javascript filename="core/observable.js">
define(
[],
function() {
	"use strict";

	return {
		bind: function(eventType, handler, scope) {
			// implement method here
		},
		trigger: function(eventType) {
			// implement method here
		}
	};
});
</javascript>

For a list of current mixins, you can soon check the API doc. Right now, there is only the core/observable.

h3. Localization

WARNING: not yet done.

h3. Text Files

WARNING: not yet done

h3. Including CSS files

When your Aloha plugin needs some CSS files, you should place them in the @css@ folder of your plugin. Furthermore, your plugin should depend on the CSS file as follows:

<javascript filename="myplugin/lib/myplugin-plugin.js">
define(
['core/plugin', 'css!myplugin/css/myplugin.css'],
function(Plugin) {
    "use strict";

    return Plugin.create('myplugin', {
        init: function() {
            // Executed on plugin initialization
        },
        destroy: function() {
            // Executed when this plugin is unloaded
        }
    });
});
</javascript>

The key part is to set a dependency on +css!myplugin/css/myplugin.css+. Then, the loader knows that it needs to load the @myplugin.css@ stylesheet into the current website.

NOTE: By default, CSS file loading is *asynchronous*, meaning that CSS files are loaded in the background, independently from the JavaScript loading.
If you for some reason depend on the fact that a CSS file is included at a particular point in time (calles *synchronous loading*), you need to append the parameter @!nowait@ to the dependency, so the whole dependency looks like  @css!myplugin/css/myplugin.css!nowait@

h3. Lifecycle of Plugins

WARNING: not yet done.

h3. Dependencies between plugins

If a plugin A needs plugin B to work, you cannot just specify it as a dependency of another RequireJS module, as this will break without a meaningful error message to the user.

Let's see how to define a dependency to the @block@-Plugin:

<javascript filename="helloworld/lib/helloworld-plugin.js">
define(
['core/plugin'],
function(Plugin) {
    "use strict";

    return Plugin.create('helloworld', {
    	dependencies: ['block'],

        init: function() {
        	require('block/blockmanager', function(BlockManager) {
        		// Use BlockManager here
        	});
            // Executed on plugin initialization
        },
        destroy: function() {
            // Executed when this plugin is unloaded
        }
    });
});
</javascript>

Here, we specify a dependency to another plugin using the +dependencies+ property of our @Plugin@. Then, the plugin manager makes sure that the dependent plugin is actually loaded, and outpus an error message if not.
When everything is loaded, we can access a module from the other plugin by using a nested require() statement, as shown for the +Blockmanager+ in the example above.

h3. Changelog

* July 3, 2011: Initial version by "Sebastian Kurf√ºrst":credits.html#skurfuerst and "Christopher Hlubek":credits.html#hlubek
