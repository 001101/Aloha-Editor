h2. JavaScript Style Guide

After reading this guide, you will be able to:

* Follow our naming conventions for files, variables and types.
* Use RequireJS in a clean way.
* Write clean JavaScript code that looks good.

endprologue.

h3. Code Conventions

WARNING: The current codebase does not yet follow all of these principles.

* We use only the +TAB+ character for indentation.
* We use +UpperCamelCase+ for class names, and +lowerCamelCase+ for method and property names. The use of underscores is strongly discouraged.
* Variables which contain jQuery elements should be named like +$element+.
* We use +that+ as a name for a closure reference to +this+, but try to avoid it if there's the possibility of scope binding.

* TODO: Name of callback functions, to aid debugging??

h3. RequireJS module skeleton

All files which are RequireJS modules (scripts in +package/lib+) should follow this structure.

<javascript filename="package/lib/module.js">
/*!
 * Aloha Editor
 * Author & Copyright (c) 2011 Gentics Software GmbH
 * aloha-sales@gentics.com
 * Licensed unter the terms of http://www.aloha-editor.com/license.html
 */

define(['dependency'],
function(Dependency) {
	"use strict";

	// Declare exports

	return exports;
});
</javascript>

h3. Classes

Every class should go into one module which means one file. The filename should be lowercase, even if the class is camelcased.

<javascript filename="package/lib/classname.js">
/*!
 * Aloha Editor
 * Author & Copyright (c) 2011 Gentics Software GmbH
 * aloha-sales@gentics.com
 * Licensed unter the terms of http://www.aloha-editor.com/license.html
 */

define(['core/observable'],
function(Observable) {
	"use strict";

	/**
	 * Description of the class
	 *
	 * @class MyClass
	 */
	return Class.extend(Observable, {

		/**
		 * An optional constructor
		 *
		 * @method
		 * @constructor
		 */
		 _constructor: function() {

		 }

	});
});
</javascript>

But a module is not limited to expose a class. You could also export one of the following:

* Singletons (Class instances)
* Mixins (Class definition without @Class.extend@ call)

Or just about any other JavaScript value that is useful as a dependency.

h3. Singletons

All singletons should follow this structure:

<javascript>
/*!
 * Aloha Editor
 * Author & Copyright (c) 2011 Gentics Software GmbH
 * aloha-sales@gentics.com
 * Licensed unter the terms of http://www.aloha-editor.com/license.html
 */

define([],
function() {
	"use strict";

	return new (Class.extend({
		// Class definition here
	}))();
});
</javascript>

It will define a class and return a new instance that will be exported. Singletons are useful for global objects
that have state.

h3. RequireJS Dependency Order

TODO: Explain the order

* The base class
* Other Classes
* i18n
* i18nCore
* Text files
* vendor
* css

h3. Private methods and attributes

By convention, we prefix private methods and attributes with an underscore.

Good:

* +_myPrivateMethod()+
* +_myPrivateAttribute+

Bad:

* @myPrivateMethod()@
* @myPrivateAttribute@

h3. API

WARNING: Incomplete. How to mark stuff as API?

h3. Naming of methods

h4. Initialization Methods

Initialization methods should be named +init()+.

Good:

* +init()+
* +initSidebar()+

Bad:

* @initialize()@
* @initializeSidebar()@
* @start()@
* @run()@

h4. Shutdown methods

Shutdown methods should be named +destroy()+.

Good:

* +destroy()+

Bad:

* @shutdown()@
* @stop()@

h3. Changelog

* July 3, 2011: Initial version by "Sebastian Kurf√ºrst":credits.html#skurfuerst and "Christopher Hlubek":credits.html#hlubek
